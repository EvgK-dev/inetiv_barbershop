import logging
import re
from typing import Dict, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import httpx
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN_BARBER")
API_BASE_URL = "http://127.0.0.1:8000/api/"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_MESSAGE_LENGTH = 4096
PERIODS = {"day": "–î–µ–Ω—å", "week": "–ù–µ–¥–µ–ª—è", "month": "–ú–µ—Å—è—Ü"}
ERROR_MESSAGE = "‚ö†Ô∏è –û—à–∏–±–∫–∞: {}"
SUCCESS_STATUS_CODES = {200, 201}

# –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
BOOKING_FIELDS = {
    "master_name": r"–ú–∞—Å—Ç–µ—Ä: (.*)",
    "master_id": r"id: (.*)",
    "date": r"–î–∞—Ç–∞: (.*)",
    "time": r"–í—Ä–µ–º—è: (.*)",
    "service_name": r"–£—Å–ª—É–≥–∞: (.*)",
    "cost": r"–°—Ç–æ–∏–º–æ—Å—Ç—å: (.*)",
    "duration": r"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: (.*)",
    "client_name": r"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: (.*)",
    "client_contact": r"–ö–æ–Ω—Ç–∞–∫—Ç: (.*)",
    "client_email": r"Email: (.*)",
    "client_comment": r"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: (.*)",
}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–º–µ–Ω—é."""
    if update.message.text.lower() != "/–º–µ–Ω—é":
        return

    keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã", callback_data="booked_dates")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup,
    )


async def booked_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_BASE_URL}check_masters/")
            response.raise_for_status()
            masters = response.json()

        buttons = [
            [InlineKeyboardButton(f"{master['name']} {master['id']}", callback_data=f"choose_period_{master['id']}")]
            for master in masters
        ]
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"
    except httpx.HTTPStatusError:
        message, buttons = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Å—Ç–µ—Ä–∞—Ö.", []
    except Exception as e:
        message, buttons = ERROR_MESSAGE.format(f"–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}"), []

    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML",
    )


async def choose_period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    query = update.callback_query
    await query.answer()

    master_id = query.data.split("_")[-1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä —Å ID: {master_id}")

    buttons = [
        [InlineKeyboardButton(period_name, callback_data=f"choice_booked_dates_period_{period_key}_{master_id}")]
        for period_key, period_name in PERIODS.items()
    ]
    await query.edit_message_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å ID {master_id}:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="HTML",
    )


async def choice_booked_dates_period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    query = update.callback_query
    await query.answer()

    try:
        period, master_id = query.data.split("_")[4:6]
        if period not in PERIODS:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    except (IndexError, ValueError):
        await query.edit_message_text(text=ERROR_MESSAGE.format("–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–∞"), parse_mode="HTML")
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: –ø–µ—Ä–∏–æ–¥={period}, –º–∞—Å—Ç–µ—Ä={master_id}")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_BASE_URL}check_booked_dates/",
                json={"master_id": master_id, "period": period},
            )
            response.raise_for_status()
            data = response.json()

        master_name = data.get("master_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä")
        booked_times = data.get("booked_times", [])

        if booked_times:
            result = f"–ö–ª–∏–µ–Ω—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ <b>{master_name}</b>:\n\n" + "\n".join(
                f"{booking['date']} –≤ {booking['time']} - {booking['client_name']} (<code>{booking['client_contact']}</code>)"
                for booking in booked_times
            )
        else:
            result = f"–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç –Ω–∞ {period} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_name}."

        # –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for chunk in [result[i : i + MAX_MESSAGE_LENGTH] for i in range(0, len(result), MAX_MESSAGE_LENGTH)]:
            await query.edit_message_text(text=chunk, parse_mode="HTML")

    except httpx.HTTPStatusError:
        await query.edit_message_text(text=ERROR_MESSAGE.format("–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), parse_mode="HTML")
    except Exception as e:
        await query.edit_message_text(text=ERROR_MESSAGE.format(f"–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}"), parse_mode="HTML")


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await process_booking(update, context, endpoint="confirm_booking", action="–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")


async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await process_booking(update, context, endpoint="cancel_booking", action="–æ—Ç–º–µ–Ω–∞")


async def process_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, endpoint: str, action: str) -> None:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    message_text = query.message.text
    reply_markup = query.message.reply_markup
    booking_data = extract_booking_data(message_text)

    if not booking_data:
        await query.edit_message_text(text=ERROR_MESSAGE.format("–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"), parse_mode="HTML")
        return

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_BASE_URL}{endpoint}/", json=booking_data)
            response.raise_for_status()
            result = response.json().get("message", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {action} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
    except Exception as e:
        result = ERROR_MESSAGE.format(f"{action} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    await query.edit_message_text(
        text=f"{message_text}\n\n{result}",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )


def extract_booking_data(message_text: str) -> Optional[Dict[str, str]]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    booking_data = {}
    for key, pattern in BOOKING_FIELDS.items():
        match = re.search(pattern, message_text, re.MULTILINE)
        if match:
            booking_data[key] = match.group(1).strip()
    return booking_data if booking_data else None


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(confirm_booking, pattern=r"confirm_booking:.*"))
    application.add_handler(CallbackQueryHandler(cancel_booking, pattern=r"cancel_booking:.*"))
    application.add_handler(CallbackQueryHandler(booked_dates, pattern=r"booked_dates:.*"))
    application.add_handler(CallbackQueryHandler(choose_period, pattern=r"choose_period:.*"))
    application.add_handler(CallbackQueryHandler(choice_booked_dates_period, pattern=r"choice_booked_dates_period:.*"))

    application.run_polling()


if __name__ == "__main__":
    main()